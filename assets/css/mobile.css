/* ===== Mobile-first tokens ===== */
:root{
  --tap:48px; --gap:10px; --pad:14px;
  --ink:#111; --bg:#fff; --line:#e6e6e6;
}
@media (max-width:760px){
	
/* === Patch 2025-08-31 — Saisie sous la question === */
.row{
  grid-template-columns: 1fr !important;
  grid-template-areas:
    'lab'
    'inp'
    'res' !important;
}

  /* Conteneur + cartes plus respirants */
  .wrap{padding:12px !important}
  .card{padding:14px !important}

  /* Grilles → une colonne (tes .grid/.g2/.two etc.) */
  .grid, .g2, .grid.two, .grid2{display:grid;grid-template-columns:1fr !important;gap:var(--gap)}

  /* Champs sous la question + largeur 100% */
  .q input[type="text"], .q .answer, input[type="text"], textarea, select{
    width:100%; min-height:var(--tap); font-size:16px; /* évite le zoom iOS */
    margin-top:8px;
  }

  /* Boutons plus grands et cliquables */
  .controls button, .controls .btn, button, .kbd .key{
    min-height:var(--tap);
    padding:12px 14px; font-weight:600;
  }

  /* Tables scrollables si trop larges */
  table{display:block; overflow-x:auto; -webkit-overflow-scrolling:touch}
  table thead, table tbody{width:100%}

  /* Figures (SVG/canvas) fluides */
  svg, canvas, .figure, .circle-host{max-width:100% !important; width:100% !important; height:auto}

  /* Barre d’actions mobile en bas (duplique l’important) */
  .mb-actions{
    position:sticky; bottom:0; z-index:20;
    background:var(--bg); border-top:1px solid var(--line);
    padding:8px calc(10px + env(safe-area-inset-right)) calc(8px + env(safe-area-inset-bottom)) calc(10px + env(safe-area-inset-left));
    display:flex; gap:8px;
  }
  .mb-actions .btn{flex:1}

  /* Clavier math en tiroir */
  .kbd-host[data-collapsible]{position:fixed; left:0; right:0; bottom:0;
    background:#fff; border-top:1px solid var(--line);
    transform:translateY(100%); transition:transform .25s ease; z-index:30;
    padding-bottom:calc(env(safe-area-inset-bottom) + 6px);
  }
  .kbd-host[data-open="1"]{transform:translateY(0)}
  .kbd-toggle{position:fixed; right:12px; bottom:calc(64px + env(safe-area-inset-bottom));
    background:#111; color:#fff; border-radius:999px; padding:10px 14px; z-index:31}
}

/* Focus visibles partout */
:focus-visible{outline:2px solid #60a5fa; outline-offset:2px}


/* =========================================
   PATCH MOBILE MATHJAX SVG
   Empêche les formules de tout casser
   ========================================= */
@media (max-width:760px){

  /* ----- RESET GLOBAL ----- */

  /* On coupe les énormes hauteurs de ligne que MathJax injecte.
     Important: on cible uniquement le rendu SVG. */
  mjx-container[jax="SVG"]{
    font-size:1em !important;
    line-height:1.2 !important;
    /* empêche MathJax de forcer display:block sur certaines inline */
    display:inline-block;
    vertical-align:-0.2em !important;
    margin:0 .15em !important;    /* petit espace gauche/droite, évite le trou géant */
    padding:0 !important;
    max-width:100%;               /* pas de dépassement horizontal */
  }

  /* Le SVG interne a parfois une hauteur calculée délirante.
     On force une hauteur cohérente avec la ligne courante. */
  mjx-container[jax="SVG"] svg{
    height:1em !important;
    width:auto;
    max-width:100%;
    max-height:1.2em;
  }

  /* Les <g> internes embarquent des transforms énormes => overflow visuel.
     Ça évite que la box prenne 4 lignes. */
  mjx-container[jax="SVG"] svg > g{
    transform-origin: left bottom;
  }

  /* ----- CAS INLINE ----- */

  /* Inline = ce que tu écris entre \( ... \) ou $ ... $
     On reforce display inline-block pour être sûr que ça ne passe pas à la ligne seule,
     et on supprime les grands blancs verticaux. */
  mjx-container[jax="SVG"][display="inline"]{
    display:inline-block !important;
    vertical-align:-0.2em !important;
    line-height:1.2 !important;
    margin-top:0 !important;
    margin-bottom:0 !important;
  }

  mjx-container[jax="SVG"][display="inline"] svg{
    height:1em !important;
    max-height:1.2em;
  }

  /* ----- CAS DISPLAY (formule sur sa propre ligne) ----- */

  /* Quand tu écris \[ ... \] ou $$ ... $$,
     MathJax sort display="true". Sur mobile, on veut que ça reste lisible
     mais pas taille Titanic. On la rend un peu plus petite et on neutralise
     le gros espace avant/après. */
  mjx-container[jax="SVG"][display="true"]{
    display:block !important;
    text-align:center;
    font-size:0.95em !important;   /* léger downscale */
    line-height:1.3 !important;
    margin:0.6em 0 !important;     /* on réduit le trou vertical */
    padding:0 !important;
  }

  mjx-container[jax="SVG"][display="true"] svg{
    height:1.2em !important;
    max-height:1.4em;
  }

  /* ----- PAS D'IMMENSE ESPACE DANS LES BLOCS DE TEXTE ----- */

  /* Dans les blocs d'énoncé, d'étapes de correction, etc.
     On vire tout padding/margin vertical parasite que tu avais côté desktop
     pour "aérer" */
  .enonce mjx-container[jax="SVG"],
  .steps mjx-container[jax="SVG"],
  .uvtab mjx-container[jax="SVG"],
  .twocol-solution mjx-container[jax="SVG"],
  p mjx-container[jax="SVG"],
  li mjx-container[jax="SVG"]{
    margin-top:0 !important;
    margin-bottom:0 !important;
    padding:0 !important;
  }

  /* Certaines de tes zones de solution mettaient du padding-bottom
     aux lignes MathJax pour séparer visuellement sur desktop.
     On coupe ça en mobile sinon tu obtiens "phrase / gros vide / formule / gros vide..." */
  .steps mjx-container{
    padding-bottom:0 !important;
  }

  /* ----- ÉVITER LES FORMULES QUI PASSENT SOUS LA CARTE ----- */

  /* Quand tu as des cards avec padding serré, le SVG déborde parfois en bas.
     On clippe l'overflow vertical pour que la carte ne grandisse pas de +40px. */
  .card mjx-container[jax="SVG"]{
    max-height:1.4em;
    overflow:visible;
  }

  /* ----- LISTES D'ÉTAPES (ton .steps gris PDF=Solution) ----- */

  /* Les lignes de solution sont souvent en <div class="line"> etc.
     On remet une hauteur de ligne cohérente quand il y a une fraction haute
     (genre dérivées, quotients). */
  .steps .line,
  .steps p,
  .steps li{
    line-height:1.4;
  }
}
